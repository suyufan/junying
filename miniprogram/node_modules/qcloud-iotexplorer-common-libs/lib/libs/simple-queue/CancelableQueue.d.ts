import { SimpleQueue } from './SimpleQueue';
interface Task<T> {
    taskId: string;
    businessData: T;
    cancel: (err: unknown) => void;
    cancelPromise: Promise<any>;
    isCancelled: () => boolean;
}
export interface CancelableQueueOptions<T, V> {
    autoStart?: boolean;
    handler: (params: Task<T>) => Promise<V>;
    onTaskSuccess?: (params: Task<T>, result?: V) => any;
    onTaskError?: (err: any, params: Task<T>) => any;
    timeout?: number;
    timeoutCode?: string;
}
export declare class CancelableQueue<T, V> extends SimpleQueue<T, V> {
    protected queue: Array<Task<T>>;
    protected runningTask: Task<T>;
    protected timeout: number | null;
    protected timeoutCode: string | null;
    constructor(options: CancelableQueueOptions<T, V>);
    push(businessData: T): {
        taskId: string;
        cancel: (err: unknown) => void;
    };
    cancelAllTasks(err: unknown): void;
    protected handleCancelableTask(handler: (params: Task<T>) => Promise<V>, task: Task<T>): Promise<any>;
}
export {};
