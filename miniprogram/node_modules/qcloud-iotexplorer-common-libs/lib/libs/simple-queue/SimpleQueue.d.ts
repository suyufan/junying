interface Task<T> {
    taskId: string;
    businessData: T;
}
export declare class SimpleQueue<T, V> {
    protected taskIdCount: number;
    protected queue: Array<Task<T>>;
    protected inBusy: boolean;
    protected startExecute: boolean;
    protected runningTask: Task<T> | null;
    protected readonly handler: (params: Task<T>) => V | Promise<V>;
    protected readonly onTaskSuccess: (params: Task<T>, result?: V) => void | Promise<void>;
    protected readonly onTaskError: (err: any, params: Task<T>) => void | Promise<void>;
    protected readonly autoStart: boolean;
    constructor({ autoStart, handler, onTaskSuccess, onTaskError, }: {
        autoStart?: boolean;
        handler: (params: Task<T>) => V | Promise<V>;
        onTaskSuccess?: (params: Task<T>, result?: V) => any;
        onTaskError?: (err: any, params: Task<T>) => any;
    });
    push(businessData: T): {
        taskId: string;
    };
    start(): void;
    remove(taskId: string): void;
    stop(): void;
    clear(): void;
    protected consumeTask(): Promise<void>;
    protected getTaskId(): string;
}
export {};
