export class EsptouchTaskParameter {
    mBroadcast: boolean;
    mIntervalGuideCodeMillisecond: number;
    mIntervalDataCodeMillisecond: number;
    mTimeoutGuideCodeMillisecond: number;
    mTimeoutDataCodeMillisecond: number;
    mTotalRepeatTime: number;
    mEsptouchResultOneLen: number;
    mEsptouchResultMacLen: number;
    mEsptouchResultIpLen: number;
    mEsptouchResultTotalLen: number;
    mPortListening: number;
    mTargetPort: number;
    mWaitUdpReceivingMilliseond: number;
    mWaitUdpSendingMillisecond: number;
    mThresholdSucBroadcastCount: number;
    mExpectTaskResultCount: number;
    _datagramCount: number;
    getIntervalGuideCodeMillisecond(): number;
    getIntervalDataCodeMillisecond(): number;
    getTimeoutGuideCodeMillisecond(): number;
    getTimeoutDataCodeMillisecond(): number;
    getTimeoutTotalCodeMillisecond(): number;
    getTotalRepeatTime(): number;
    getEsptouchResultOneLen(): number;
    getEsptouchResultMacLen(): number;
    getEsptouchResultIpLen(): number;
    getEsptouchResultTotalLen(): number;
    getPortListening(): number;
    getTargetHostname(): string;
    getTargetPort(): number;
    getWaitUdpReceivingMillisecond(): number;
    getWaitUdpSendingMillisecond(): number;
    getWaitUdpTotalMillisecond(): number;
    setWaitUdpTotalMillisecond(waitUdpTotalMillisecond: any): void;
    getThresholdSucBroadcastCount(): number;
    getExpectTaskResultCount(): number;
    setExpectTaskResultCount(expectTaskResultCount: any): void;
    setBroadcast(broadcast: any): void;
    __getNextDatagramCount(): number;
}
export const esptouchTaskParameter: EsptouchTaskParameter;
