import FileSdk, { ResourceUploadResponse } from './FileSdk';
import SparkMD5 from 'spark-md5';

export class FileSdkForH5 extends FileSdk {
  async appGetResourceUploadURL(file: any): Promise<ResourceUploadResponse> {
    if (!file) {
      this.sdk.tips.showError('请先选择文件');
      return;
    }
    const fileHash = this.getfileHash(file);
    let resourceName = '' ;
    await fileHash.then(async (hash) => {
      const res = await super.getResourceUploadURL(file, hash, this.sdk.productId);
      this.handleUpload(res?.UploadUrl, file, hash);
      resourceName = res?.ResourceName;
    });
    return { ResourceName: resourceName };
  }

  // 上传文件 XHR方式
  handleUpload(UploadUrl: string, file: any, hash: unknown): void {
    const xhr = new XMLHttpRequest();
    xhr.open('PUT', UploadUrl, true);
    xhr.onreadystatechange = async () => {
      if (xhr.readyState === 4 && xhr.status === 200) {
        try {
          // eslint-disable-next-line @typescript-eslint/naming-convention
          const { ResourceName } = await super.createResource(file, hash, this.sdk.productId);
          if (ResourceName) {
            this.sdk.tips.showSuccess('文件上传成功');
          }
        } catch (e) {
          this.sdk.tips.showError(`上传失败,${e.msg}`);
        }
      }
    };
    xhr.send(file);
  }

  // 小文件获取hash值
  getfileHash(file: Blob): Promise<any> {
    return new Promise((resolve) => {
      const spark = new SparkMD5.ArrayBuffer();
      const fileReader = new FileReader();
      fileReader.onload = (e) => {
        if (e?.target) {
          const result = e.target.result as ArrayBuffer;
          spark.append(result);
          resolve(spark.end());
        }
      };
      fileReader.onerror = () => {
        this.sdk.tips.showError(`上传文件错误${fileReader.error}`);
      };
      fileReader.readAsArrayBuffer(file);
    });
  }


  async handelDownToDevice(ResourceName: string): Promise<string> {
    await super.controlDeviceResource(ResourceName, this.sdk.deviceId);
    this.sdk.tips.showLoading('文件下发中', {
      type: 'loading',
      canBeReplace: true,
      duration: 0,
      delayDuration: 200,
      canClickClose: false,
    });
    const result = super.getDeviceResource(ResourceName, this.sdk.deviceId); // 判断是否下发成功
    return result;
  }
}
