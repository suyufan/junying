export interface ResourceUploadResponse {
  RequestId?: string;
  ResourceName?: string;
  UploadUrl?: string;
}
export interface ResourceCreateResponse {
  RequestId?: string;
  ResourceName?: string;
}

abstract class FileSdk {
  protected sdk: any;
  protected request: (action, params) => Promise<any>;
  constructor(sdk: any) {
    this.sdk = sdk;
    this.request = (action, params) => {
      if (this.sdk.requestTokenApi) {
        return this.sdk.requestTokenApi(action, params);
      } else {
        return this.sdk.requestApi(action, params);
      }
    };
  }

  async getResourceUploadURL(file: any, hash: unknown, productId: string): Promise<ResourceUploadResponse> {
    try {
      return this.request('AppGetResourceUploadURL', {
        ProductId: productId,
        UserResourceName: hash, // 不能传中文且每个文件必须独一无二, 所以传hash值代替
        FileSize: file.size,
        ResourceVer: '0.0.1',
        ReadProtect: 1,
      });
    } catch (e) {
      console.log('AppGetResourceUploadURL错误');
    }
  }
  async createResource(file: any, hash: unknown, productId: string): Promise<ResourceCreateResponse> {
    return this.request('AppCreateProductResource', {
      ProductId: productId,
      UserResourceName: hash,
      FileSize: file.size,
      ResourceVer: '0.0.1',
      FileHash: hash,
      ResourceType: 'FILE',
      ReadProtect: 1,
    });
  }
  getDeviceResource(ResourceName: any, deviceId: string): Promise<string> {
    const startTime = Date.now() / 1000;
    // eslint-disable-next-line @typescript-eslint/naming-convention
    let Resource = '';
    return new Promise(async (resolve) => {
      let endTime = Date.now() / 1000;
      const params: any = {
        DeviceId: deviceId,
        ResourceName,
      };
      try {
        ({ Resource } = await this.request('AppDescribeDeviceResource', params));
      } catch (e) {}

      if (!Resource) {
        const id = setInterval(async () => {
          endTime = Date.now() / 1000;
          try {
            ({ Resource } = await this.request('AppDescribeDeviceResource', params));
          } catch (e) {}

          if (Resource || (endTime - startTime) > 36) {
            clearInterval(id);
            resolve(Resource);
          }
        }, 5000);
      } else {
        resolve(Resource);
      }
    });
  }
  async controlDeviceResource(ResourceName: string, deviceId: string): Promise<void> {
    const params = {
      DeviceId: deviceId,
      ResourceName,
      ResourceVer: '0.0.1',
      Method: 'update',
    };
    await this.request('AppControlDeviceResource', params);
  }

  abstract handleUpload(UploadUrl: string, file: any, hash: string): void;
}

export default FileSdk;
