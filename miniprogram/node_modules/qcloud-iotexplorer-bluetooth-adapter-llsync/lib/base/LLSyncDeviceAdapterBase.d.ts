import { Reporter } from 'qcloud-iotexplorer-appdev-sdk';
import * as utils from '../libs';
import { DeviceAdapter } from 'qcloud-iotexplorer-bluetooth-adapter';
import { LLSyncProtocol } from './LLSync/LLSyncProtocol';
export interface Wait4EventResponseOptions {
    timeout?: number;
    timeoutCode?: string;
    timeoutHandler?: () => any;
    wrapSplitDataMode?: utils.TlvDataType;
    shouldWrapSplitDataFn?: boolean;
    afterBindEvent?: () => any;
}
export interface WriteAndWait4ResponseOptions extends Wait4EventResponseOptions {
    writeId?: string;
}
interface WriteDataParams {
    data: any;
    writeId?: string;
    waitGap?: number;
    retryTime?: number;
}
/**
 * 处理底层数据传输及协议层数据传输
 */
export declare class LLSyncDeviceAdapterBase extends DeviceAdapter {
    mtu: number;
    reporter: Reporter;
    protocol: LLSyncProtocol;
    isEncrypted: boolean;
    authorized: boolean;
    /**
     * 连接后加密数据使用的密钥
     */
    sessionKey: string;
    private writeDataQueue;
    constructor(props: any);
    notifyMessage({ type, data }?: any): Promise<any>;
    handleBLEMessage(hex: string[]): {};
    wait4EventResponse<T>(eventName: string, handler: (data: any) => T, { timeout, timeoutCode, timeoutHandler, wrapSplitDataMode, shouldWrapSplitDataFn, afterBindEvent, }?: Wait4EventResponseOptions): Promise<T>;
    writeAndWait4Response<T>(data2Write: any, eventName: string, handler: (data: any) => T, { timeout, timeoutCode, timeoutHandler, writeId, wrapSplitDataMode, shouldWrapSplitDataFn, }?: WriteAndWait4ResponseOptions): Promise<T>;
    writeMtuResult(type: 'success' | 'fail'): void;
    sliceData(data: any, tmpData: any, mode: any): string[];
    writeData(data: any, params?: Omit<WriteDataParams, 'data'>): Promise<void>;
    setMtu(mtu: any): Promise<any>;
    private writeDataInternal;
}
export {};
