import { LLSyncDeviceAdapter } from './LLSyncDeviceAdapter';
export interface OtaUpdateInfo {
    needUpdate: boolean;
    targetVersion?: string;
    otaUrl?: string;
}
export declare type ProgressCallBackFun = (params: {
    code: string;
    msg?: string;
    detail: any;
}) => void;
export interface OtaUpdateFileInfo {
    fileCrc: number;
    fileSize: number;
    fileBuffer: ArrayBuffer;
}
export interface OtaUpdateProgressInfo {
    maxPackageNumPerCircle: number;
    maxLengthPerPackage: number;
    alreadyReceiveSize: number;
    retryTimeGap: number;
    retryTimes: number;
    rebootMaxTime: number;
    sendWaitGap: number;
}
export declare const generateFileChunks: (fileOjb: OtaUpdateFileInfo, moduleInfo: OtaUpdateProgressInfo) => ArrayBuffer[];
export declare const getPackageDataToSend: (srcData: ArrayBuffer[], seq: any) => string[];
export declare class LLSyncOtaProcessor {
    deviceAdapter: LLSyncDeviceAdapter;
    otaInProgress: boolean;
    _onProgressCb: ProgressCallBackFun;
    processPromise: any;
    get reporter(): import("qcloud-iotexplorer-appdev-sdk").Reporter;
    get otaVersion(): string;
    constructor(deviceAdapter: LLSyncDeviceAdapter);
    onProgress(code: any, detail?: {}): void;
    cancelOta(): void;
    startOta({ onProgress, }: {
        onProgress: ProgressCallBackFun;
    }): Promise<{
        code: string;
        msg: string;
    }>;
    reportAndConfirmUpdateStatus({ otaUpdateProgressInfo, }: {
        otaUpdateProgressInfo: OtaUpdateProgressInfo;
    }): Promise<{
        code: any;
    }>;
    /**
     * @description 检查是否有固件升级
     * @returns {OtaUpdateInfo} 升级信息
     */
    getOtaUpdateInfo(): Promise<OtaUpdateInfo>;
    sendOTARequest({ fileInfo, otaUpdateInfo, }: {
        fileInfo: OtaUpdateFileInfo;
        otaUpdateInfo: OtaUpdateInfo;
    }): Promise<{
        supportUploadFromBreak: boolean;
        otaUpdateProgressInfo: OtaUpdateProgressInfo;
    }>;
    reportSendOtaDataSuccess(): Promise<any>;
    sendOtaFile({ fileInfo, otaUpdateProgressInfo, }: {
        fileInfo: OtaUpdateFileInfo;
        otaUpdateProgressInfo: OtaUpdateProgressInfo;
    }): any;
    /**
     * 确保把一个循环的数据发送出去，否则重试5次之后失败
     */
    sendFileChunks({ fileChunks, otaUpdateProgressInfo, seq, retryTime, }: {
        fileChunks: ArrayBuffer[];
        otaUpdateProgressInfo: OtaUpdateProgressInfo;
        seq?: number;
        retryTime?: number;
    }): Promise<{
        fileSize: number;
    }>;
    /**
     * 等待设备回复，确认文件包发送情况
     * @param fullLength 本次循环发送的完成数据包的总个数
     */
    confirmFileChunkReceived({ otaUpdateProgressInfo, }: {
        otaUpdateProgressInfo: OtaUpdateProgressInfo;
    }): Promise<{
        seq: number;
        fileSize: number;
    }>;
    checkRebootStatus({ otaUpdateInfo, rebootMaxTime, }: {
        otaUpdateInfo: OtaUpdateInfo;
        rebootMaxTime: number;
    }): Promise<any>;
    downloadOtaFile(updateData: OtaUpdateInfo): Promise<OtaUpdateFileInfo>;
}
