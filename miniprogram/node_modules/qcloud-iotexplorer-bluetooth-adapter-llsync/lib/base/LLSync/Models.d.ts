import { AppDevSdk } from 'qcloud-iotexplorer-appdev-sdk';
interface DeviceSignResp {
    AgitatedContent: string;
    Timestamp: string;
    AgitatedSignature: string;
    Content: string;
    RequestId: string;
    SignMethod: string;
}
export declare class Models {
    appDevSdk: AppDevSdk;
    constructor(appDevSdk: any);
    getDeviceConfig({ DeviceId, DeviceKey, isUserConfig, }: {
        DeviceId: string;
        DeviceKey: string;
        isUserConfig?: boolean;
    }): Promise<any>;
    getDeviceSignAgitated({ DeviceId, Content, SignMethod, ContentType, }: {
        DeviceId: any;
        Content: any;
        SignMethod?: string;
        ContentType?: string;
    }): Promise<DeviceSignResp>;
    getDeviceSign({ DeviceId, Content, SignMethod, ContentType, }: {
        DeviceId: any;
        Content: any;
        SignMethod?: string;
        ContentType: any;
    }): Promise<string>;
    getDeviceSecret({ DeviceId, AppNonce, DeviceNonce, DeviceNonceSign, }: {
        DeviceId: any;
        AppNonce: any;
        DeviceNonce: any;
        DeviceNonceSign: any;
    }): Promise<string>;
    getLLsyncSecretEncryptKey({ AppNonce, // APP 的随机数，这里是 R1
    DeviceNonce, // 设备的随机数，这里是 R2
    DeviceNonceSign, }: {
        AppNonce: any;
        DeviceNonce: any;
        DeviceNonceSign: any;
    }): Promise<any>;
    setDeviceConfig({ DeviceId, DeviceKey, DeviceValue, isUserConfig, }: {
        DeviceId?: string;
        DeviceKey: string;
        DeviceValue: any;
        isUserConfig?: boolean;
    }): any;
    reportBlueToothDeviceData({ ProductId, DeviceName, Data, DataTimeStamp, }: {
        ProductId: any;
        DeviceName: any;
        Data: any;
        DataTimeStamp: any;
    }): Promise<any>;
    getDeviceData({ ProductId, DeviceName }: {
        ProductId: any;
        DeviceName: any;
    }): Promise<any>;
    reportDeviceEvent({ DeviceId, EventId, Params, }: {
        DeviceId: any;
        EventId: any;
        Params: any;
    }): Promise<any>;
    addDeviceBySigInFamily({ Signature, // sign
    DeviceTimestamp, // timestamp
    ProductId, DeviceName, DeviceId, ConnId, // random
    FamilyId, RoomId, SignMethod, BindType, }: {
        Signature: string;
        DeviceTimestamp: number;
        ProductId?: string;
        DeviceName?: string;
        DeviceId?: string;
        ConnId: string;
        FamilyId: string;
        RoomId?: string;
        SignMethod?: string;
        BindType?: 'wifi_sign' | 'bluetooth_sign' | 'other_sign';
    }): Promise<any>;
    deleteDeviceFromFamily({ FamilyId, DeviceId, }: {
        FamilyId: any;
        DeviceId: any;
    }): Promise<any>;
    reportDeviceInfo({ productId, deviceName, deviceInfo, }: {
        productId: any;
        deviceName: any;
        deviceInfo: any;
    }): Promise<any>;
    publishDeviceActionMessage({ productId, deviceName, clientToken, actionId, output, }: {
        productId: any;
        deviceName: any;
        clientToken: any;
        actionId: any;
        output: any;
    }): Promise<any>;
    /**
     * 标准蓝牙OTA接口：
     * https://iwiki.woa.com/pages/viewpage.action?pageId=441988542#LLSync%E8%93%9D%E7%89%99%E9%9C%80%E6%B1%82
     -AppReportFirmwareVersion
     */
    reportOTAVersion({ Version, DeviceId, }: {
        Version: string;
        DeviceId: string;
    }): Promise<any>;
    getDeviceOTAInfo({ DeviceId, }: {
        DeviceId: string;
    }): Promise<{
        FirmwareURL: string;
        TargetVersion: string;
        UploadVersion: string;
    }>;
    getProduct({ ProductId }: {
        ProductId: any;
    }): Promise<any>;
    getProductConfig({ ProductId }: {
        ProductId: any;
    }): Promise<any>;
    dynamicRegisterDevice({ deviceName, productId, timestamp, nonce, sign, }: {
        deviceName: any;
        productId: any;
        timestamp: any;
        nonce: any;
        sign: any;
    }): Promise<{
        payload: any;
    }>;
}
export {};
