import { DeviceFilterFunction } from 'qcloud-iotexplorer-bluetooth-adapter';
import { ProductUIDevConfig } from 'iotexplorer-ui-dev-config';
import { AppDevSdk, Reporter } from 'qcloud-iotexplorer-appdev-sdk';
import { Action } from '../../libs';
import { Models } from './Models';
import { LLSyncDeviceAdapterBase } from '../LLSyncDeviceAdapterBase';
import { LLSyncOtaProcessor, ProgressCallBackFun } from './LLSyncOtaProcessor';
export interface LLSyncDeviceAdapterOptions {
    appDevSdk: AppDevSdk;
}
interface EncryptConfig {
    contentType?: 'hex';
}
export declare class LLSyncDeviceAdapter extends LLSyncDeviceAdapterBase {
    static options: LLSyncDeviceAdapterOptions;
    static serviceId16: string;
    static serviceId: string;
    static deviceFilter: DeviceFilterFunction;
    static getUserIdentify(): string;
    static injectOptions(options: LLSyncDeviceAdapterOptions): void;
    otaProcessor: LLSyncOtaProcessor;
    reporter: Reporter;
    _initPromise: any;
    productConfig: ProductUIDevConfig;
    appDevSdk: AppDevSdk;
    productInfo: any;
    dataTemplate: any;
    models: Models;
    bleVersion: any;
    localPsk: string;
    userIdentify: string;
    otaVersion: string;
    mtu: number;
    secretKey: string;
    disableWsEventHandle: boolean;
    _enableWsEventHandle: boolean;
    _enableLLEventHandle: boolean;
    get ready(): boolean;
    get needUserCheck(): boolean;
    constructor(props: any);
    normalizeError(error: any): any;
    init(reload?: boolean): Promise<any>;
    getDevicePsk(deviceName: any): Promise<any>;
    startOta({ onProgress, }: {
        onProgress: ProgressCallBackFun;
    }): Promise<{
        code: string;
        msg: string;
    }>;
    cancelOta(): void;
    startListenLLEvents(): void;
    stopListenLLEvents(): void;
    setWsEventHandleEnabled(enabled: boolean): void;
    setLLEventHandleEnabled(enabled: boolean): void;
    onPropertyReport(data: any): Promise<void>;
    onGetStatus(): Promise<never>;
    onEventReport(data: any): Promise<never>;
    bindDevice({ familyId, roomId, }: {
        familyId: any;
        roomId: any;
    }): Promise<string>;
    bindDeviceEncrypted({ isDynamicRegister }: {
        isDynamicRegister: boolean;
    }): Promise<{
        sign: string;
        timestamp: number;
        nonce: any;
        secretKey: string;
        deviceName: any;
    }>;
    requestBindEncrypted(sign: string, timestamp: string): Promise<{
        ack: number;
        timestamp: string;
        R2: string;
        deviceSign: string;
    }>;
    verifyDeviceSign(R1: string, R2: string, sign: string): Promise<string>;
    getDeviceNameWithRegister(): Promise<{
        deviceName: any;
        nonce: string;
    }>;
    getDeviceNameEncrypted(): Promise<{
        nonce: any;
        deviceName: any;
    }>;
    encrypt(content: string, secretKey: any, config?: EncryptConfig): string;
    encrypt(content: string[], secretKey: any, config?: EncryptConfig): string[];
    notifyBindDevice(secretKey: string): Promise<{
        ack: number;
        sign: string;
    }>;
    unbindDevice({ familyId, deviceName, }: {
        familyId: any;
        deviceName: any;
    }): Promise<never>;
    unbindDeviceEncrypted(): Promise<boolean>;
    controlDevice({ deviceData }: {
        deviceData: any;
    }): Promise<never>;
    controlAction({ actionData }: {
        actionData: Action;
    }): Promise<never>;
    authenticateConnection({ deviceName, }?: {
        deviceName?: string;
    }): Promise<never>;
    authConnectionEncrypted({ deviceName, }: {
        deviceName: any;
    }): Promise<{
        version: number;
        mtu: number;
        needSetMtu: boolean;
        otaVersion: any;
    }>;
    getAdvertisingData(): Promise<import("./LLSyncProtocol").AdvertisingData>;
    sendHeartbeat(): Promise<void>;
    notifyLocalRssi({ rssi }: {
        rssi: number;
    }): Promise<never>;
    /**
     * @param data 要发送的hexdata string
     * @param mode 绑定，解绑等类型常数
     * @returns {Promise}
     */
    sendBleData(data: string, mode: string): Promise<string[]>;
    toString(): string;
}
export declare const StandardDeviceAdapter: typeof LLSyncDeviceAdapter;
export {};
