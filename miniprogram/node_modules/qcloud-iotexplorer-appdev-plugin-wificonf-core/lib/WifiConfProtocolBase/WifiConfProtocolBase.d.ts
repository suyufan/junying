import { WifiConfType } from 'iotexplorer-ui-dev-config';
import { AppDevSdk } from 'qcloud-iotexplorer-appdev-sdk';
import { WifiConfStepCode } from '../constants';
export interface DeviceInfo {
    productId: string;
    deviceName: string;
}
export interface WifiConfOption {
    wifiConfType: WifiConfType;
    targetWifiInfo: WifiInfo;
    onComplete: (deviceInfo: DeviceInfo) => any;
    softAPInfo?: WifiInfo;
    wifiConfToken?: string;
    udpAddress?: '192.168.4.1';
    udpPort?: 8266;
    stepInterval?: number;
    familyId?: string;
    roomId?: string;
    getDeviceExtendInfo?: ({ udpServer }: {
        udpServer: any;
    }) => Promise<any>;
    onProgress?: (event: Response) => any;
    onError?: (error: Response) => any;
    autoRetry?: boolean;
    autoBind?: boolean;
    extraInfo?: {
        [key: string]: any;
    };
    newTokenVersion?: boolean;
}
export interface WifiInfo {
    SSID: string;
    password: string;
    BSSID?: string;
}
export interface Response {
    code: WifiConfStepCode | string;
    msg?: string;
    detail?: any;
    reportEvents?: Array<string>;
}
/**
 * 配网过程抽象为：配网协议 - 自定义业务流程 - 结束
 * （适用于非softap协议）
 */
export declare class WifiConfProtocolBase extends AppDevSdk.utils.EventEmitter {
    connectAborted: boolean;
    sdk: AppDevSdk;
    options?: WifiConfOption;
    constructor(sdk: AppDevSdk, options: WifiConfOption);
    onProgress(event: Response): void;
    onComplete(data: any): void;
    onError(event: Response): void;
    start({ doNotRetry }?: {
        doNotRetry?: boolean;
    }): any;
    doProtocol(any?: any): Promise<{
        address: string;
    }>;
    doBusiness({ address, }: {
        address: any;
    }): Promise<{
        deviceName: string;
        productId: string;
    }>;
}
