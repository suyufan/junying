/**
 * Implementation of AES in JavaScript.
 * See http://en.wikipedia.org/wiki/Advanced_Encryption_Standard
 *
 * WARNING: This is ECB mode only. If you are encrypting something
 * longer than 16 bytes, or encrypting more than one value with the same key
 * (so basically, always) you need to use this with a block cipher mode of
 * operation.  See Cbc.
 *
 * See http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation for more
 * information.
 *
 * @constructor
 * @implements {BlockCipher}
 * @param {!Array<number>} key The key as an array of integers in {0, 255}.
 *     The key must have lengths of 16, 24, or 32 integers for 128-,
 *     192-, or 256-bit encryption, respectively.
 * @final
 * @struct
 */
export declare const Aes: {
    (key: any): void;
    prototype: any;
    /**
     * Number of words in a block.
     * @type {number}
     * @const
     * @private
     */
    BLOCK_SIZE_IN_WORDS_: number;
    /**
     * @define {boolean} Whether to call test method stubs.  This can be enabled
     *     for unit testing.
     */
    ENABLE_TEST_MODE: boolean;
    /**
     * Asserts that the key's array of integers is in the correct format.
     * @param {!Array<number>} arr AES key as array of integers.
     * @private
     */
    assertKeyArray_(arr: any): void;
    /**
     * Precomputed SBox lookup.
     * @type {!Array<number>}
     * @private
     */
    SBOX_: number[];
    /**
     * Precomputed InvSBox lookup.
     * @type {!Array<number>}
     * @private
     */
    INV_SBOX_: number[];
    /**
     * Precomputed RCon lookup.
     * @type {!Array<!Array<number>>}
     * @private
     */
    RCON_: number[][];
    /**
     * Precomputed lookup of multiplication by 2 in GF(2^8)
     * @type {!Array<number>}
     * @private
     */
    MULT_2_: number[];
    /**
     * Precomputed lookup of multiplication by 3 in GF(2^8)
     * @type {!Array<number>}
     * @private
     */
    MULT_3_: number[];
    /**
     * Precomputed lookup of multiplication by 9 in GF(2^8)
     * @type {!Array<number>}
     * @private
     */
    MULT_9_: number[];
    /**
     * Precomputed lookup of multiplication by 11 in GF(2^8)
     * @type {!Array<number>}
     * @private
     */
    MULT_B_: number[];
    /**
     * Precomputed lookup of multiplication by 13 in GF(2^8)
     * @type {!Array<number>}
     * @private
     */
    MULT_D_: number[];
    /**
     * Precomputed lookup of multiplication by 14 in GF(2^8)
     * @type {!Array<number>}
     * @private
     */
    MULT_E_: number[];
};
