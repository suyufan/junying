/// <reference types="miniprogram-api-typings" />
import { AppDevSdk } from 'qcloud-iotexplorer-appdev-sdk';
export declare class SimpleConfigGenerator extends AppDevSdk.utils.EventEmitter {
    configData: any;
    mApSsid: any;
    mApPassword: any;
    mApBssid: any;
    mLocalIp: any;
    mSocketClient: any;
    mSocketServer: any;
    mIsCancelled: boolean;
    mDefaultMac: string;
    mEachPacketSendCounts: number;
    mPacketSendTimeIntervalMs: number;
    logger: WechatMiniprogram.Console;
    /**
    * Constructor of SimpleConfigGenerator, it will cost some time(maybe a bit
    * much)
    *
    * @param apSsid      the Ap's ssid
    * @param apBssid     the Ap's bssid
    * @param apPassword  the Ap's password
    * @param inetAddress the phone's or pad's local ip address allocated by Ap
    */
    constructor(apSsid: any, apBssid: any, apPassword: any, inetAddress: any, logger: any);
    init(): void;
    generate(): void;
    resetSimpleConfig(): void;
    setSSid(ssid: any): void;
    setPassword(password: any): void;
    setPin(pin: any): void;
    setDefaultPin(pin: any): void;
    setIp(ip: any): void;
    sendSync({ type, callback }?: {
        type?: string;
        callback?: () => void;
    }): void | Promise<void>;
    sendData({ type, callback }?: {
        type?: string;
        callback?: () => void;
    }): void | Promise<void>;
    sendUdp({ type, callback, messages, }?: {
        type?: string;
        callback?: () => void;
        messages?: any[];
    }): Promise<void> | void;
    handleCfgACK(recvBuf: any): (string | number)[];
    sendCfgAckPacket(): Promise<void>;
    interrupt(): Promise<void>;
}
