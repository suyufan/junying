export interface ProductUIDevConfig {
    Global: ProductUIDevGlobalConfig;
    Panel: ProductUIDevPanelConfig;
    WifiSoftAP: ProductUIDevWifiSoftApConfig;
    WifiSmartConfig: ProductUIDevWifiSmartConfigConfig;
    WifiSimpleConfig: ProductUIDevWifiSimpleConfigConfig;
    WifiAirkiss: ProductUIDevWifiAirkissConfig;
    WifiBle: ProductUIDevWifiBleConfig;
    WifiLLSyncBle: ProductUIDevWifiBleConfig;
    WiFiQRCode: ProductUIDevWiFiQRCodeConf;
    SubDeviceBinding: ProductUIDevSubDeviceBindingConfig;
    WifiConfTypeList: WifiConfType[];
    ShortCut: ProductUIDevShortCutConfig;
    AppAutomation?: ProductUIDevAppAutomationConfig;
    AppUserList: string[];
    BleConfig: ProductUIDevBleConfig;
    CellularConfig: ProductUIDevCellularConfig;
}
export declare type UIDevConfigType = keyof ProductUIDevConfig;
export interface ProductUIDevGlobalConfig {
    customizeControl: boolean;
    IconUrl?: string;
    IconUrlGrid?: string;
    ManufacturerName?: string;
    ProductModel?: string;
    ProductDisplayName?: string;
    IconUrlAdvertise?: string;
    AddDeviceHintMsg?: string;
    ChipPackage?: string;
}
export declare enum PanelType {
    standard = "standard",
    h5 = "h5",
    weapp = "weapp",
    free = "free",
    custom = "custom"
}
export interface ProductUIDevPanelConfig {
    type: PanelType;
    enableForAllSubProducts?: boolean;
    standard?: StandardPanelConfig;
    h5?: H5PanelConfig;
    free?: FreePanelConfig;
    custom: CustomPanelConfig;
}
interface CustomPanelConfig {
    panelDefine?: string;
    customPanelId?: string;
}
export interface StandardPanelConfig {
    theme: 'standard' | 'simple' | 'dark';
    bgImgId?: string;
    navBar?: StandardPanelNavBarConfig;
    timingProject?: boolean;
    properties: StandardPanelPropertyConfig[];
}
export declare enum StandardPanelWidgetType {
    BoolNormal = "bool-normal",
    BoolSmall = "bool-small",
    NumBtn = "num-btn",
    NumSlider = "num-slider",
    EnumBtn = "enum-btn",
    EnumSlider = "enum-slider",
    EnumPopup = "enum-popup",
    EnumTitle = "enum-title"
}
export declare enum StandardPanelPropertyBtnType {
    BtnBig = "btn-big",
    BtnCol1 = "btn-col-1",
    BtnCol2 = "btn-col-2",
    BtnCol3 = "btn-col-3",
    BtnSwitch = "btn-switch",
    BtnGroup = "btn-group"
}
export declare type TemplateDataType = 'bool' | 'int' | 'string' | 'float' | 'enum' | 'stringenum' | 'timestamp' | 'struct' | 'array';
export interface StandardPanelPropertyConfig {
    id: string;
    dataType?: TemplateDataType;
    ui: StandardPanelPropertyUIConfig;
}
export interface StandardPanelPropertyUIConfig {
    type?: StandardPanelPropertyBtnType;
    icon?: string;
    enumIcons?: Record<string, string>;
    visible?: boolean;
}
export interface StandardPanelNavBarConfig {
    visible?: boolean;
    timingProject?: boolean;
    templateId?: string;
}
export interface WebviewSetting {
    navBarBgColor?: string;
    frontColor?: string;
    bgColor?: string;
    textStyle?: string;
}
export interface H5PanelSetting extends WebviewSetting {
    scripts?: string[];
    styles?: string[];
}
export interface H5PanelConfig {
    url?: string;
    release?: H5PanelSetting;
    dev?: H5PanelSetting;
    simplifyMode?: boolean;
}
export interface ProductUIDevShortCutConfig {
    powerSwitch: string;
    powerSwitchIcon?: string;
    shortcut: StandardPanelPropertyConfig[];
    showStatus?: any[];
}
export interface ProductUIDevAppAutomationConfig {
    conditions: [];
    actions: [];
}
export interface FreePanelConfig {
    panelId: string;
}
export interface DeviceConfigurationHardwareGuideConfig {
    message?: string;
    bgImg: string;
    btnText: string;
    guide?: string;
}
export interface DeviceConfConfig {
    hardwareGuide: DeviceConfigurationHardwareGuideConfig;
}
export declare enum WifiConfSoftApNameType {
    Random = "Random",
    FixWhole = "FixWhole"
}
export interface WifiConfigurationWifiSoftApGuide {
    message: string;
    showPasswordBox?: boolean;
    btnText?: string;
    apNameType?: WifiConfSoftApNameType;
    apName: string;
    apNameRandomObj?: {
        prefix: string;
        randomDigit: number;
    };
    defaultPassword?: string;
}
export interface ProductUIDevWifiSoftApConfig extends DeviceConfConfig {
    connectApGuide: WifiConfigurationWifiSoftApGuide;
}
export interface WifiConfigurationQrcodeDisplayGuide {
    message: string;
}
export interface ProductUIDevWiFiQRCodeConf extends DeviceConfConfig {
    qrcodeDisplayGuide: WifiConfigurationQrcodeDisplayGuide;
}
export declare enum WifiConfType {
    SoftAp = "softap",
    SmartConfig = "smartconfig",
    SimpleConfig = "simpleconfig",
    AirKiss = "airkiss",
    BLEComboEsp = "ble",
    BLEComboLLSync = "llsyncble",
    DualMode = "dualmode",
    SubDevice = "sub_device",
    GreeSoftAp = "greesoftap",
    GreeBle = "greeble",
    GreeSubDevice = "greesubdevice",
    GreeMatching = "greematching",
    Qrcode = "qrcode"
}
export declare type ProductUIDevWifiSimpleConfigConfig = DeviceConfConfig;
export declare type ProductUIDevWifiAirkissConfig = DeviceConfConfig;
export declare type ProductUIDevWifiBleConfig = DeviceConfConfig;
export declare type ProductUIDevWifiSmartConfigConfig = DeviceConfConfig;
export declare type ProductUIDevSubDeviceBindingConfig = DeviceConfConfig;
export declare type ProductUIDevCellularConfig = DeviceConfConfig;
export interface BindingBootConfigConfig {
    confirmRequired: string;
    guideTooltip?: string;
    confirmTooltip: string;
    resetTooltip?: string;
    failTooltip: string;
    bgImg: string;
}
export declare enum BleProtocolType {
    undetermined = "",
    standard = "standard",
    standardAdvert = "standardAdvert",
    standardMesh = "standardMesh",
    custom = "custom"
}
export interface BleHardwareGuideConfig extends DeviceConfigurationHardwareGuideConfig {
    confirmRequired: 0 | 1;
    userConfirmText: string;
    failText: string;
}
export interface ProductUIDevBleConfig {
    protocolType: BleProtocolType;
    hardwareGuide: BleHardwareGuideConfig;
    bindingBootConfig: BindingBootConfigConfig;
}
export {};
