/// <reference types="miniprogram-api-typings" />
import { BlueToothBase } from './BlueToothBase';
import { BlueToothAdapter } from './BlueToothAdapter';
import { BlueToothActions, CommunicationMode, H5Websocket } from './types';
export interface BlueToothDeviceInfo extends WechatMiniprogram.BlueToothDevice {
    deviceName: string;
    serviceId: string;
    productId?: string;
}
export interface BLEMessageResponse {
    shouldIgnore?: boolean;
    reportData?: any;
    [propName: string]: any;
}
export declare type DeviceAdapterActions = Omit<BlueToothActions, 'initProductIds'>;
export interface DeviceFilterExtendInfo {
    serviceIds?: string[];
    deviceName?: string;
    productId?: string;
    ignoreDeviceIds?: string[];
    ignoreServiceIds?: string[];
    extendInfo?: any;
}
export declare type DeviceFilterFunction = (deviceInfo: WechatMiniprogram.BlueToothDevice, extendInfo: DeviceFilterExtendInfo) => BlueToothDeviceInfo | void | false | null;
/**
 * 设备适配器
 */
export declare class DeviceAdapter extends BlueToothBase {
    static serviceId: string;
    /**
     * 匹配各自设备，并返回包含唯一标识的deviceInfo
     *
     * 需包含:
     * {
     *    ...deviceInfo,
     *    deviceName: mac,
     *    serviceId: matchedServiceId,
     * }
     * @param deviceInfo
     * @param extendInfo
     */
    static deviceFilter: DeviceFilterFunction;
    bluetoothAdapter: BlueToothAdapter;
    extendInfo: any;
    _h5Websocket: any;
    _name: string;
    _deviceId: string;
    _deviceName: string;
    _deviceConnected: boolean;
    _productId: string;
    _deviceRegistered: boolean;
    _characteristicsAutoNotified: boolean;
    _services: any[];
    characteristicsMap: {};
    _actions: DeviceAdapterActions;
    _bluetoothApi: any;
    communicationMode: CommunicationMode;
    constructor({ deviceId, productId, deviceName, name, // 设备原始名称
    actions, bluetoothApi, h5Websocket, extendInfo, bluetoothAdapter, }: {
        deviceId: string;
        productId: string;
        deviceName: string;
        name: string;
        actions: DeviceAdapterActions;
        bluetoothApi: any;
        h5Websocket?: H5Websocket;
        extendInfo?: any;
        bluetoothAdapter: BlueToothAdapter;
    });
    _getNotifyId({ serviceId }?: {
        serviceId?: string;
    }): any;
    get _writeId(): any;
    get _notifyId(): any;
    get _readId(): any;
    get _indicateId(): any;
    get deviceId(): string;
    get productId(): string;
    get deviceName(): string;
    set deviceName(deviceName: string);
    get isConnected(): boolean;
    get originName(): string;
    get explorerDeviceId(): string;
    get serviceId(): any;
    get deviceInfo(): {
        productId: string;
        deviceName: string;
        deviceId: string;
        explorerDeviceId: string;
        name: string;
    };
    init(): Promise<void>;
    handleBLEMessage(hexStrArr: string[], { serviceId, characteristicId }: {
        serviceId: string;
        characteristicId: string;
    }): BLEMessageResponse;
    registerDevice(): Promise<void>;
    bindDevice({ familyId, roomId, }?: {
        familyId?: string;
        roomId?: string;
    }): Promise<string>;
    onBleConnectionStateChange({ connected }: {
        connected: any;
    }): void;
    onBLECharacteristicValueChange({ serviceId, characteristicId, value, }: {
        serviceId: any;
        characteristicId: any;
        value: any;
    }): Promise<void>;
    disconnectDevice(): void;
    /**
     *  1. 连接设备
     *  2. 获取服务列表、特征列表
     *  3. 监听notify，注册回调
     */
    connectDevice({ autoNotify, }?: {
        autoNotify?: boolean;
    }): Promise<void>;
    autoNotifyCharacteristics(force?: boolean): Promise<void>;
    write(data: any, { writeId, serviceId, }?: {
        writeId?: string;
        serviceId?: string;
    }): Promise<void>;
    _write(value: any, { writeId, serviceId, }?: {
        writeId?: string;
        serviceId?: string;
    }): Promise<void>;
    getBLEDeviceServices(): Promise<any>;
    setCharacteristicsIds(serviceId: any, characteristics: any): void;
    getBLEDeviceCharacteristics({ serviceId, }?: {
        serviceId?: string;
    }): Promise<any>;
    notifyBLECharacteristicValueChange({ characteristicId, serviceId, state, }?: {
        characteristicId?: string;
        serviceId?: string;
        state?: boolean;
    }): Promise<void>;
    readBLECharacteristicValue({ serviceId, characteristicId, }?: {
        serviceId?: string;
        characteristicId?: string;
    }): Promise<void>;
    setBLEMTU(params: {
        deviceId?: string;
        mtu: number;
    }): any;
    getBLEDeviceRSSI(): any;
    destroy(): void;
    advertFilter(advert: any): any;
    onScanAdvert(params: any): void;
}
