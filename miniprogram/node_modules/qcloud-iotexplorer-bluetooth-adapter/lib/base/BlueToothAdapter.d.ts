/// <reference types="miniprogram-api-typings" />
import { BlueToothBase } from './BlueToothBase';
import { DeviceAdapter, BlueToothDeviceInfo } from './DeviceAdapter';
import { BluetoothDeviceCacheManager } from './BluetoothDeviceCacheManager';
import { SimpleStore } from '../libs/SimpleStore';
import { SimpleQueue } from 'qcloud-iotexplorer-common-libs';
import { BlueToothActions, BlueToothAdapterProps, ConnectDeviceOptions, ConnectDeviceParams, DeviceAdapterFactory, SearchDeviceParams, StartSearchParams, StartAdvertisingParams } from './types';
/**
 * 1. 负责初始化蓝牙模块
 * 2. 负责搜索设备
 */
export declare class BlueToothAdapter extends BlueToothBase {
    deviceCacheManager: BluetoothDeviceCacheManager;
    _devMode: (() => boolean) | boolean;
    _ignoreAnonymousDevices: boolean;
    _h5Websocket: any;
    _bluetoothApi: any;
    _actions: BlueToothActions;
    _deviceAdapterFactoryMap: {};
    _productIdMap: {
        [serviceId: string]: string;
    };
    _inited: boolean;
    _available: boolean;
    _discovering: boolean;
    _onBluetoothDeviceFoundHandler: any;
    _onDeviceFoundThrottle: number;
    _setOnDeviceFoundThrottle: any;
    _onBluetoothScanAdvertisingHandler: any;
    _initPromise: any;
    _searchDevicePromise: any;
    _deviceAdapterStore: SimpleStore<DeviceAdapter>;
    _deviceConnectStatusStore: SimpleStore<{
        connected: boolean;
        explorerDeviceId: string;
        deviceId: string;
    }>;
    _blePeripheralServer: WechatMiniprogram.BLEPeripheralServer;
    _advertisingQueue: SimpleQueue<StartAdvertisingParams, Promise<any>>;
    _initPeripheralServerPromise: any;
    protected _mpDisableRefreshCache: boolean;
    constructor({ deviceAdapters, actions, bluetoothApi, h5Websocket, devMode, ignoreAnonymousDevices, mpDisableRefreshCache, }: BlueToothAdapterProps);
    get devMode(): boolean;
    addAdapter(deviceAdapter: any, forceAdd?: boolean): void;
    _filterDevices({ deviceId: SpecificDeviceId, devices, serviceIds, deviceName, productId, ignoreDeviceIds, ignoreServiceIds, extendInfo, DeviceAdapter, }: {
        deviceId?: string;
        devices: WechatMiniprogram.BlueToothDevice[];
        serviceIds?: string[];
        deviceName?: string;
        productId?: string;
        ignoreDeviceIds?: string[];
        ignoreServiceIds?: string[];
        extendInfo?: any;
        DeviceAdapter?: DeviceAdapterFactory;
    }): BlueToothDeviceInfo[];
    _getSupportServiceIds(): string[];
    setOnDeviceFoundThrottle(onDeviceFoundThrottle: any): void;
    resetOnDeviceFoundThrottle(): void;
    onDeviceConnectStatusChange({ connected, explorerDeviceId, deviceId, }: {
        connected: any;
        explorerDeviceId: any;
        deviceId: any;
    }): void;
    startBluetoothDevicesDiscovery(params?: any): any;
    /**
     * 1. 本地决定stop，看h5是否在搜，如果在搜则忽略
     * 2. h5决定stop，看本地是否在搜，如果在搜则忽略
     */
    stopBluetoothDevicesDiscovery(): any;
    cleanup(action?: string): void;
    /**
     * 1. wx.openBluetoothAdapter
     * 2.
     * @returns {Promise<void>}
     */
    init(): Promise<any>;
    initProductIds(): Promise<void>;
    onBleConnectionStateChange({ deviceId, connected }: {
        deviceId: any;
        connected: any;
    }): void;
    onBLECharacteristicValueChange({ deviceId, serviceId, characteristicId, value, }: {
        deviceId: any;
        serviceId: any;
        characteristicId: any;
        value: any;
    }): Promise<void>;
    getBluetoothDevices(): Promise<any>;
    onBluetoothDeviceFound(foundDevices?: WechatMiniprogram.OnBluetoothDeviceFoundCallbackResult): Promise<any>;
    /**
     * 记得必须要调 stopSearch
     */
    startSearch({ serviceId, serviceIds, ignoreDeviceIds, ignoreServiceIds, onSearch, onError, timeout, extendInfo, DeviceAdapter, startBluetoothDevicesDiscoveryParams, }: StartSearchParams): Promise<any>;
    stopSearch(): void;
    /**
     * 目前的交互只支持展示一台待连接设备，所以搜到第一台设备后就停止
     */
    searchDevice({ deviceId, serviceId, serviceIds, deviceName, productId, ignoreDeviceIds, timeout, extendInfo, ignoreWarning, ignoreCache, disableCache, DeviceAdapter, // 指定adapter，会自动忽略已经注入的adapter
    startBluetoothDevicesDiscoveryParams, useCacheFoundDevices, }: SearchDeviceParams): Promise<BlueToothDeviceInfo>;
    stopSearchDevice(): void;
    getDeviceAdapter(params: string | {
        deviceId?: string;
        explorerDeviceId?: string;
    }): DeviceAdapter;
    instantiateDeviceAdapter({ deviceId, serviceId, deviceName, name, productId, extendInfo, }: ConnectDeviceParams, { DeviceAdapter: SpecificDeviceAdapter, reuseAdapterInstance, }?: ConnectDeviceOptions): DeviceAdapter;
    connectDevice({ deviceId, serviceId, mac, deviceName, name, productId, extendInfo, }: ConnectDeviceParams, { DeviceAdapter: SpecificDeviceAdapter, autoNotify, enableDeviceCache, destroyAdapterAfterDisconnect, disableCache, reuseAdapterInstance, }?: ConnectDeviceOptions): Promise<DeviceAdapter>;
    connectAdvertisingDevice({ deviceId, deviceName, productId, ...deviceParams }: ConnectDeviceParams, options?: ConnectDeviceOptions): Promise<DeviceAdapter>;
    searchAndConnectDevice({ deviceId, serviceId, serviceIds, deviceName, productId, ignoreDeviceIds, timeout, extendInfo, }: SearchDeviceParams, { autoNotify, disableCache, DeviceAdapter, }?: {
        disableCache?: boolean;
        autoNotify?: boolean;
        DeviceAdapter?: DeviceAdapterFactory;
    }): Promise<any>;
    startScanAdvert(): Promise<void>;
    stopScanAdvert(): void;
    _initPeripheralServer(): Promise<any>;
    advertising({ deviceId, explorerDeviceId, powerLevel, advertiseRequest, duration, onSuccess, onError, }: StartAdvertisingParams): Promise<{
        taskId: string;
    }>;
    stopAdvertising(): void;
}
