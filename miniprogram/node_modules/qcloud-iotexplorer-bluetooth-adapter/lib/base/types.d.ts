/// <reference types="miniprogram-api-typings" />
import { BlueToothDeviceInfo, DeviceAdapter } from './DeviceAdapter';
import EventEmitter from 'event-emitter-for-miniprogram';
export declare type DeviceAdapterFactory = typeof DeviceAdapter;
export interface BlueToothActions {
    initProductIds?: () => Promise<{
        [propKey: string]: string;
    }>;
    registerDevice?: ({ deviceId, deviceName, productId, }: {
        deviceId?: string;
        deviceName?: string;
        productId?: string;
    }) => Promise<any>;
    bindDevice?: (params: {
        deviceId?: string;
        deviceName?: string;
        productId?: string;
        familyId?: string;
        roomId?: string;
    }) => Promise<any>;
    reportDeviceData?: (params: {
        deviceId?: string;
        deviceName?: string;
        productId?: string;
        data: any;
        timestamp: number;
    }) => Promise<any>;
}
export interface H5Websocket extends EventEmitter {
    requestHandlerMap: Map<string, (any: any) => any>;
    options: {
        url: string;
    };
    _manuallyClose: boolean;
    _connected: boolean;
    isConnected: () => boolean;
    doConnectWs: () => Promise<any>;
    connect: () => Promise<any>;
    disconnect: (manually: boolean) => any;
    send: (action: string, data: any, options?: {
        reqId?: string;
    }) => Promise<any>;
    activeConnect: () => Promise<any>;
}
export interface ConnectDeviceParams {
    deviceId?: string;
    serviceId: string;
    mac?: string;
    deviceName: string;
    name?: string;
    productId?: string;
    extendInfo?: any;
}
export interface ConnectDeviceOptions {
    DeviceAdapter?: DeviceAdapterFactory;
    autoNotify?: boolean;
    enableDeviceCache?: boolean;
    disableCache?: boolean;
    reuseAdapterInstance?: boolean;
    destroyAdapterAfterDisconnect?: boolean;
}
export interface BlueToothAdapterProps {
    deviceAdapters?: (typeof DeviceAdapter)[];
    actions?: BlueToothActions;
    bluetoothApi?: any;
    h5Websocket?: H5Websocket;
    devMode?: (() => boolean) | boolean;
    ignoreAnonymousDevices?: boolean;
    mpDisableRefreshCache?: boolean;
}
export interface SearchDeviceBaseParams {
    serviceId?: string;
    serviceIds?: string[];
    ignoreDeviceIds?: string[];
    ignoreServiceIds?: string[];
    timeout?: number;
    extendInfo?: any;
    DeviceAdapter?: DeviceAdapterFactory;
    startBluetoothDevicesDiscoveryParams?: any;
}
export interface StartSearchParams extends SearchDeviceBaseParams {
    onSearch?: (devices: BlueToothDeviceInfo[]) => any;
    onError?: (error: Error | {
        [propKey: string]: any;
    } | string) => any;
}
export interface SearchDeviceParams extends SearchDeviceBaseParams {
    deviceId?: string;
    deviceName?: string;
    productId?: string;
    ignoreWarning?: boolean;
    ignoreCache?: boolean;
    disableCache?: boolean;
    useCacheFoundDevices?: boolean;
}
export interface StartAdvertisingParams {
    deviceId: string;
    explorerDeviceId?: string;
    powerLevel?: 'low' | 'medium' | 'high';
    duration?: number;
    advertiseRequest: Omit<WechatMiniprogram.AdvertiseReqObj, 'connectable'>;
    onSuccess?: () => void;
    onError?: (err: any) => void;
}
export declare enum CommunicationMode {
    'GATT' = "GATT",
    'ADVERT' = "ADVERT"
}
