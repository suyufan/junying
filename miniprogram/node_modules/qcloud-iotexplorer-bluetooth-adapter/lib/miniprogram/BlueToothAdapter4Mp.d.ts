import { BlueToothAdapter, BlueToothDeviceInfo } from '../base';
import { BlueToothAdapterProps, SearchDeviceParams, StartSearchParams } from '../base/types';
/**
 * 小程序版本在核心上拓展了：
 * 1. h5 channel 的注册和处理
 * 2. 某些api需要将响应上报h5 channel
 * 3. 需要 cleanup
 */
export declare class BlueToothAdapter4Mp extends BlueToothAdapter {
    _h5ChanelOpened: boolean;
    _localDiscoveringInUse: boolean;
    _h5DiscoveringInUse: boolean;
    _cleanupTimer: any;
    _currentProductId: string;
    handleH5WsMessage: ({ data, reqId }: {
        data: any;
        reqId: string;
    }) => boolean;
    deviceDelayDisconnectQueue: {
        deviceId: string;
        timer: number;
    }[];
    _mpBleConnectionStateCache: Record<string, boolean>;
    constructor({ bluetoothApi, ...props }: BlueToothAdapterProps);
    tryCancelDisconnectDevice(deviceId: any): boolean;
    disconnectDevice({ deviceId, explorerDeviceId }: {
        deviceId?: string;
        explorerDeviceId?: string;
    }, delay?: number): void;
    setCurrentProduct(productId: any): void;
    startBluetoothDevicesDiscovery(isFromH5?: boolean): any;
    /**
     * 1. 本地决定stop，看h5是否在搜，如果在搜则忽略
     * 2. h5决定stop，看本地是否在搜，如果在搜则忽略
     */
    stopBluetoothDevicesDiscovery(isFromH5?: boolean): any;
    response2BlueToothChanel(action: any, payload?: {}, reqId?: string): Promise<void>;
    /**
     * 启用清理器
     * 每一段时间检查一次，若不在搜索状态、且当前连接设备数为0，则cleanup
     *
     * 每次 init, startSearch, searchDevice, connectDevice 都会重置清理器
     *
     * 测试用例：
     * timeout设10秒
     * 1. 搜索中，清理器不会触发，一直重置
     * 2. 退出搜索，无设备连接，10秒后清理器触发，移开设备，再次进入搜索页面，无法搜到该设备
     * 3. 单连设备，进入搜索，退出搜索，10秒后不会触发清理器，断开设备，再过10秒，清理器触发
     */
    startCleanupTimer(): void;
    init(): Promise<void>;
    onBleConnectionStateChange({ deviceId, connected }: {
        deviceId: any;
        connected: any;
    }): void;
    onBLECharacteristicValueChange({ deviceId, serviceId, characteristicId, value, }: {
        deviceId: any;
        serviceId: any;
        characteristicId: any;
        value: any;
    }): Promise<void>;
    onBluetoothDeviceFound(params: any): Promise<void>;
    startSearch(params: StartSearchParams): Promise<void>;
    searchDevice(params: SearchDeviceParams): Promise<BlueToothDeviceInfo>;
    cleanup(action?: string): void;
}
