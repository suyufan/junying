import { DeviceAdapter } from '../base';
import { Constructor } from '../base/BlueToothBase';
export declare const AdapterDeviceAdapter4H5: <T extends Constructor<DeviceAdapter>>(IDeviceAdapter: T) => {
    new (...props: any[]): {
        write(data: any, writeId: any): Promise<void>;
        bluetoothAdapter: import("../base").BlueToothAdapter;
        extendInfo: any;
        _h5Websocket: any;
        _name: string;
        _deviceId: string;
        _deviceName: string;
        _deviceConnected: boolean;
        _productId: string;
        _deviceRegistered: boolean;
        _characteristicsAutoNotified: boolean;
        _services: any[];
        characteristicsMap: {};
        _actions: Pick<import("../base").BlueToothActions, "registerDevice" | "bindDevice" | "reportDeviceData">;
        _bluetoothApi: any;
        communicationMode: import("../base").CommunicationMode;
        _getNotifyId({ serviceId }?: {
            serviceId?: string;
        }): any;
        readonly _writeId: any;
        readonly _notifyId: any;
        readonly _readId: any;
        readonly _indicateId: any;
        readonly deviceId: string;
        readonly productId: string;
        deviceName: string;
        readonly isConnected: boolean;
        readonly originName: string;
        readonly explorerDeviceId: string;
        readonly serviceId: any;
        readonly deviceInfo: {
            productId: string;
            deviceName: string;
            deviceId: string;
            explorerDeviceId: string;
            name: string;
        };
        init(): Promise<void>;
        handleBLEMessage(hexStrArr: string[], { serviceId, characteristicId }: {
            serviceId: string;
            characteristicId: string;
        }): import("../base").BLEMessageResponse;
        registerDevice(): Promise<void>;
        bindDevice({ familyId, roomId, }?: {
            familyId?: string;
            roomId?: string;
        }): Promise<string>;
        onBleConnectionStateChange({ connected }: {
            connected: any;
        }): void;
        onBLECharacteristicValueChange({ serviceId, characteristicId, value, }: {
            serviceId: any;
            characteristicId: any;
            value: any;
        }): Promise<void>;
        disconnectDevice(): void;
        connectDevice({ autoNotify, }?: {
            autoNotify?: boolean;
        }): Promise<void>;
        autoNotifyCharacteristics(force?: boolean): Promise<void>;
        _write(value: any, { writeId, serviceId, }?: {
            writeId?: string;
            serviceId?: string;
        }): Promise<void>;
        getBLEDeviceServices(): Promise<any>;
        setCharacteristicsIds(serviceId: any, characteristics: any): void;
        getBLEDeviceCharacteristics({ serviceId, }?: {
            serviceId?: string;
        }): Promise<any>;
        notifyBLECharacteristicValueChange({ characteristicId, serviceId, state, }?: {
            characteristicId?: string;
            serviceId?: string;
            state?: boolean;
        }): Promise<void>;
        readBLECharacteristicValue({ serviceId, characteristicId, }?: {
            serviceId?: string;
            characteristicId?: string;
        }): Promise<void>;
        setBLEMTU(params: {
            deviceId?: string;
            mtu: number;
        }): any;
        getBLEDeviceRSSI(): any;
        destroy(): void;
        advertFilter(advert: any): any;
        onScanAdvert(params: any): void;
        _cleanupMap: {};
        _normalizeError(error: any): any;
        cleanup(action?: string): void;
        addCleanupTask(action: any, cleanupFn: any): void;
        removeCleanupTask(action: any): void;
        on: (type: string, listener: import("event-emitter-for-miniprogram").listenerCallback) => import("event-emitter-for-miniprogram").default;
        once: (type: any, listener: import("event-emitter-for-miniprogram").listenerCallback) => import("event-emitter-for-miniprogram").default;
        off: (type: any, listener?: import("event-emitter-for-miniprogram").listenerCallback) => import("event-emitter-for-miniprogram").default;
        emit: (type: any, ...argus: any[]) => Promise<any>;
    };
} & T;
export declare const DeviceAdapter4H5: {
    new (...props: any[]): {
        write(data: any, writeId: any): Promise<void>;
        bluetoothAdapter: import("../base").BlueToothAdapter;
        extendInfo: any;
        _h5Websocket: any;
        _name: string;
        _deviceId: string;
        _deviceName: string;
        _deviceConnected: boolean;
        _productId: string;
        _deviceRegistered: boolean;
        _characteristicsAutoNotified: boolean;
        _services: any[];
        characteristicsMap: {};
        _actions: Pick<import("../base").BlueToothActions, "registerDevice" | "bindDevice" | "reportDeviceData">;
        _bluetoothApi: any;
        communicationMode: import("../base").CommunicationMode;
        _getNotifyId({ serviceId }?: {
            serviceId?: string;
        }): any;
        readonly _writeId: any;
        readonly _notifyId: any;
        readonly _readId: any;
        readonly _indicateId: any;
        readonly deviceId: string;
        readonly productId: string;
        deviceName: string;
        readonly isConnected: boolean;
        readonly originName: string;
        readonly explorerDeviceId: string;
        readonly serviceId: any;
        readonly deviceInfo: {
            productId: string;
            deviceName: string;
            deviceId: string;
            explorerDeviceId: string;
            name: string;
        };
        init(): Promise<void>;
        handleBLEMessage(hexStrArr: string[], { serviceId, characteristicId }: {
            serviceId: string;
            characteristicId: string;
        }): import("../base").BLEMessageResponse;
        registerDevice(): Promise<void>;
        bindDevice({ familyId, roomId, }?: {
            familyId?: string;
            roomId?: string;
        }): Promise<string>;
        onBleConnectionStateChange({ connected }: {
            connected: any;
        }): void;
        onBLECharacteristicValueChange({ serviceId, characteristicId, value, }: {
            serviceId: any;
            characteristicId: any;
            value: any;
        }): Promise<void>;
        disconnectDevice(): void;
        connectDevice({ autoNotify, }?: {
            autoNotify?: boolean;
        }): Promise<void>;
        autoNotifyCharacteristics(force?: boolean): Promise<void>;
        _write(value: any, { writeId, serviceId, }?: {
            writeId?: string;
            serviceId?: string;
        }): Promise<void>;
        getBLEDeviceServices(): Promise<any>;
        setCharacteristicsIds(serviceId: any, characteristics: any): void;
        getBLEDeviceCharacteristics({ serviceId, }?: {
            serviceId?: string;
        }): Promise<any>;
        notifyBLECharacteristicValueChange({ characteristicId, serviceId, state, }?: {
            characteristicId?: string;
            serviceId?: string;
            state?: boolean;
        }): Promise<void>;
        readBLECharacteristicValue({ serviceId, characteristicId, }?: {
            serviceId?: string;
            characteristicId?: string;
        }): Promise<void>;
        setBLEMTU(params: {
            deviceId?: string;
            mtu: number;
        }): any;
        getBLEDeviceRSSI(): any;
        destroy(): void;
        advertFilter(advert: any): any;
        onScanAdvert(params: any): void;
        _cleanupMap: {};
        _normalizeError(error: any): any;
        cleanup(action?: string): void;
        addCleanupTask(action: any, cleanupFn: any): void;
        removeCleanupTask(action: any): void;
        on: (type: string, listener: import("event-emitter-for-miniprogram").listenerCallback) => import("event-emitter-for-miniprogram").default;
        once: (type: any, listener: import("event-emitter-for-miniprogram").listenerCallback) => import("event-emitter-for-miniprogram").default;
        off: (type: any, listener?: import("event-emitter-for-miniprogram").listenerCallback) => import("event-emitter-for-miniprogram").default;
        emit: (type: any, ...argus: any[]) => Promise<any>;
    };
} & typeof DeviceAdapter;
