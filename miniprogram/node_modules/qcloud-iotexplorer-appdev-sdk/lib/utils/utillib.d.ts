export declare const appendParams: (url: any, data?: {}) => any;
export declare const delay: (duration: any) => Promise<unknown>;
export interface PromiseObj<T = any> {
    promise: Promise<T>;
    resolve: (T?: any) => any;
    reject: (any?: any) => any;
}
export declare function genPromise<T = any>(): PromiseObj<T>;
export declare const noop: () => void;
export declare const getErrorMsg: (err: any) => string;
export declare const isPlainObject: (obj: any) => boolean;
/**
 * @see https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-react.html#wxshowmodalobject
 * @param opts
 * @param enforce 是否强制展示
 */
interface modalParams {
    confirmText?: string;
    confirmColor?: string;
    cancelText?: string;
    cancelColor?: string;
}
export declare let hasModalShow: boolean;
export declare const showModal: (title: any, content: string, { confirmText, confirmColor, cancelText, cancelColor, ...opts }: modalParams) => Promise<unknown>;
/**
 * 对传入的值中的长字段自动进行裁剪
 *
 *   - 传入字符串: 裁剪字符串长度
 *   - 传入数组: 裁剪数组长度，并递归裁剪数组的每个元素
 *   - 传入对象: 对对象每个字段进行递归裁剪
 *   - 其它: 原样返回
 *
 * @param {any} field
 * @param {number} maxStringLength 字符串允许的最大长度，默认为 4096
 * @param {number} maxArrayLength  数组允许的最大长度，默认为 10
 * @param {number} maxObjectKeys  对象最大字段限制，默认为 10
 */
export declare function cutoffLong(field: any, maxStringLength?: number, maxArrayLength?: number, maxObjectKeys?: number): any;
export declare function jsonp2json(jsonpString: any): {};
export interface ListResponse<T> {
    list: T[];
    total: number;
}
export declare function fetchAllList<T>(fetchFn: (props: {
    offset: number;
    limit: number;
}) => Promise<ListResponse<T>>): Promise<T[]>;
export declare function getType(any: any): any;
export declare function isArray(any: any): boolean;
export declare function isEmpty(any: any): boolean;
export declare function isObject(obj: any): boolean;
export declare const tryCallHandler: (context: any, eventName: any, ...params: any[]) => void;
export declare function hexToStr(hex: any): string;
export declare function arrayBufferToHexStringArray(buffer: any): any[];
export declare function hexToArrayBuffer(hex: any): ArrayBufferLike;
export {};
