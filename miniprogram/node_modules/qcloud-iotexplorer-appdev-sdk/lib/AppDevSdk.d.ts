import EventEmitter from 'event-emitter-for-miniprogram';
import { LoginManager, LoginManagerOptions, IotWebsocket, IotWebsocketOptions, UserInfo } from './modules';
import { RequestOptions } from './utils';
import * as utils from './utils';
import * as constants from './constants';
export interface AppDevSdkWsOptions extends IotWebsocketOptions {
    autoReconnect?: boolean;
    disconnectWhenAppHide?: boolean;
    connectWhenAppShow?: boolean;
    connectWhenInit?: boolean;
}
export declare abstract class AppDevPlugin {
    static install(sdk: AppDevSdk): void;
}
export interface AppDevSdkOptions {
    getAccessToken: LoginManagerOptions['getAccessToken'];
    appKey?: string;
    apiPlatform?: string;
    apiUrl?: string;
    apiRegionId?: number;
    debug?: boolean;
    wsConfig?: AppDevSdkWsOptions;
    reporter: (eventName: string, params: any) => any;
    defaultUin?: string;
    plugins?: (typeof AppDevPlugin)[];
    enableAccessTokenCache?: boolean;
}
export interface RequestApiOptions extends Omit<RequestOptions, 'url'> {
    doNotRetry?: boolean;
    needLogin?: boolean;
    doNotReport?: boolean;
    isTokenApi?: boolean;
    isSecureApi?: boolean;
}
export interface Reporter {
    info?: (eventName: string, params?: any) => any;
    warn?: (eventName: string, params?: any) => any;
    error?: (eventName: string, params?: any) => any;
}
export interface AppDevPlugins {
    [pluginName: string]: any;
}
export declare class AppDevSdk extends EventEmitter {
    static utils: typeof utils;
    static constants: typeof constants;
    isManuallyClose: boolean;
    _defaultFamilyIdPromise: any;
    ws: IotWebsocket;
    loginManager: LoginManager;
    _apiPlatform?: string;
    _initPromise: Promise<void>;
    reporter: Reporter;
    _defaultUin?: string;
    _apiUrl?: string;
    _apiRegionId?: number;
    _debug?: boolean;
    _connectWsWhenInit: boolean;
    constants: typeof constants;
    utils: typeof utils;
    plugins: AppDevPlugins;
    constructor({ getAccessToken, appKey, apiPlatform, apiRegionId, debug, apiUrl, wsConfig: wsConfigExtended, reporter, plugins, defaultUin, enableAccessTokenCache, }: AppDevSdkOptions);
    usePlugin(plugin: typeof AppDevPlugin): void;
    get userInfo(): UserInfo;
    get isLogin(): boolean;
    get userId(): string;
    get uin(): string;
    get nickName(): string;
    init(options?: {
        reload?: boolean;
    }): Promise<void>;
    getDefaultFamilyId(): Promise<string>;
    sendWebsocketMessage(action: any, params?: {}): Promise<any>;
    connectWebsocket(): Promise<void>;
    disconnectWebsocket(): void;
    subscribeDevices(deviceList: string[] | any[]): Promise<void>;
    requestApi(Action: any, payload?: any, { doNotRetry, needLogin, doNotReport, ...opts }?: RequestApiOptions): any;
    _handlePushEvent(pushEvent: any): void;
    _onWebsocketClose(): Promise<never>;
    _reconnectWs(): Promise<never>;
}
