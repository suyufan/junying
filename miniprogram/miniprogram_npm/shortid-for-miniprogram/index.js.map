{"version":3,"sources":["index.js","lib/index.js","lib/alphabet.js","lib/random/random-from-seed.js","lib/build.js","lib/generate.js","lib/random/random-byte.js","lib/nanoid-format.js","lib/is-valid.js","lib/util/cluster-worker-id.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,ACHA,AJYA,AENA;ADIA,AENA,ACHA,AJYA,AENA;ADIA,AENA,ACHA,AJYA,AENA;ADIA,AENA,ACHA,AJYA,AKfA,AHSA;ADIA,AENA,ACHA,AJYA,AKfA,AHSA;ADIA,AENA,ACHA,AJYA,AKfA,AHSA;ADIA,AENA,ACHA,AJYA,AMlBA,ADGA,AHSA;ADIA,AENA,ACHA,AJYA,AMlBA,ADGA,AHSA;ADIA,AENA,ACHA,AJYA,AMlBA,ADGA,AHSA;ADIA,AENA,ACHA,AJYA,AOrBA,ADGA,ADGA,AHSA;ADIA,AENA,ACHA,AJYA,AOrBA,ADGA,ADGA,AHSA;ADIA,AENA,ACHA,AJYA,AOrBA,ADGA,ADGA,AHSA;ADIA,AENA,ACHA,AJYA,AOrBA,ADGA,ADGA,AHSA,AMlBA;APsBA,AENA,ACHA,AJYA,AOrBA,ADGA,ADGA,AHSA,AMlBA;APsBA,AENA,ACHA,AJYA,AOrBA,ADGA,ADGA,AHSA,AMlBA;APsBA,AENA,ACHA,AJYA,AOrBA,ADGA,ADGA,AHSA,AMlBA;APsBA,AENA,ACHA,AJYA,AOrBA,ADGA,ADGA,AHSA;ADIA,AENA,ACHA,AJYA,AOrBA,ADGA,ADGA,AHSA;ADIA,AENA,ACHA,AJYA,AOrBA,ADGA,ADGA,AHSA;ADIA,AENA,ACHA,AJYA,AOrBA,ADGA,ADGA,AHSA;ADIA,AENA,ACHA,AJYA,AOrBA,ADGA,ADGA;AJaA,AENA,ACHA,AJYA,AOrBA,ADGA,ADGA;AJaA,AENA,AHSA,AOrBA,ADGA,ADGA;AJaA,AENA,AHSA,AOrBA,ADGA,ADGA;AJaA,AENA,AHSA,AOrBA,ADGA,ADGA;AJaA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,AENA,AHSA,AMlBA;ALgBA,ADGA,AMlBA;ALgBA,ADGA,AMlBA;ALgBA,ADGA,AMlBA;ALgBA,ADGA,AMlBA;ALgBA,ADGA,AMlBA;ALgBA,ADGA,AMlBA;ALgBA,ADGA,AMlBA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nmodule.exports = require('./lib/index');\n","\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('./nanoid-format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","/**\n * Secure random string generator with custom alphabet.\n *\n * Alphabet must contain 256 symbols or less. Otherwise, the generator\n * will not be secure.\n *\n * @param {generator} random The random bytes generator.\n * @param {string} alphabet Symbols to be used in new random string.\n * @param {size} size The number of symbols in new random string.\n *\n * @return {string} Random string.\n *\n * @example\n * const format = require('nanoid/format')\n *\n * function random (size) {\n *   const result = []\n *   for (let i = 0; i < size; i++) {\n *     result.push(randomByte())\n *   }\n *   return result\n * }\n *\n * format(random, \"abcdef\", 5) //=> \"fbaef\"\n *\n * @name format\n * @function\n */\nmodule.exports = function (random, alphabet, size) {\n\tvar mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n\tvar step = Math.ceil(1.6 * mask * size / alphabet.length)\n\n\tvar id = ''\n\twhile (true) {\n\t\tvar bytes = random(step)\n\t\tfor (var i = 0; i < step; i++) {\n\t\t\tvar byte = bytes[i] & mask\n\t\t\tif (alphabet[byte]) {\n\t\t\t\tid += alphabet[byte]\n\t\t\t\tif (id.length === size) return id\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @callback generator\n * @param {number} bytes The number of bytes to generate.\n * @return {number[]} Random bytes.\n */\n","\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","\n\nmodule.exports = 0;\n"]}